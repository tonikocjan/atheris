import stdlib

class Comparable {
    func compare(with object: Any) Int {
        let comparable = object as Comparable
        if comparable != null {
            return self.value() - comparable.value()
        }
        else {
            return 0
        }
    }

    func value() Int {
        return 0
    }

    func toString() {
    }
}

class Integer: Comparable {
    var val: Int

    init(_ val: Int) {
        self.val = val
    }

    override func value() Int {
        return self.val
    }

    override func toString() {
        print(self.val)
    }
}

class Decimal: Comparable {
    var val: Int

    init(_ val: Int) {
        self.val = val
    }

    override func value() Int {
        return self.val
    }

    override func toString() {
        print(self.val)
    }
}

func partition(_ list: [Comparable], low: Int, high: Int) Int {
    let pivot = list[low]
    var i = low - 1
    var j = high + 1

    while true {
        while true {
            j = j - 1
            let el = list[j]
            if el.compare(with: pivot) <= 0 {
                break
            }
        }

        while true {
            i = i + 1
            let el = list[i]
            if el.compare(with: pivot) >= 0 {
                break
            }
        }

        if i < j {
            let tmp = list[i]
            list[i] = list[j]
            list[j] = tmp
        }
        else {
            return j
        }
    }
}

func quicksort(_ list: [Comparable], low: Int, high: Int) {
    if low < high {
        let p = partition(list, low: low, high: high)
        quicksort(list, low: low, high: p)
        quicksort(list, low: p + 1, high: high)
    }
}

var list = [ Integer(8), Decimal(0), Integer(3), Integer(9), Decimal(14), Decimal(10), Integer(27), Decimal(1), Decimal(5), Integer(8), Decimal(-1), Decimal(26) ]

var i = 0
while i < 100000 {
    quicksort(list, low: 0, high: list.count - 1)
    i = i + 1
}
