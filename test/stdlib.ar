
interface Any {}

interface Hashable {
	func hash() Int
}

extension Int: Hashable {
	func hash() Int {
		return 12
	}
}

extension String: Hashable {
	func hash() Int {
		return 10
	}
}

# MARK: - Print
func print() {
}

func print(_ any: Any) {
}

func mem(_ memory: Int) Int {	
}

func String(_ val: Any) String {
}


func bubbleSort(_ list: [Int], size: Int) Int {
    var i = 0
    while i < size {
        var j = 0
        while j < size {
            if list[i] < list[j] {
                let tmp = list[i]
                list[i] = list[j]
                list[j] = tmp
            }
            j = j + 1
        }
        i = i + 1
    }
}

var counter: Int = 0

/*func quickSort(_ list: [Int], low: Int, high: Int) {

    func partition(_ list: [Int], low: Int, high: Int) Int {
        let pivot = list[low]
        var i = low - 1
        var j = high + 1

        while true {
            while true {
                j = j - 1
                if list[j] <= pivot {
                    break
                }
            }

            while true {
                i = i + 1
                if list[i] >= pivot {
                    break
                }
            }

            if i < j {
                let tmp = list[i]
                list[i] = list[j]
                list[j] = tmp
            }
            else {
                return j
            }
        }
    }
    counter = counter + 1
    if low < high {
        let p = partition(list, low: low, high: high)
        quickSort(list, low: low, high: p)
        quickSort(list, low: p + 1, high: high)
    }
}*/
func quickSort(_ list: [Int], low: Int, high: Int) {

    func partition(_ list: [Int], low: Int, high: Int) Int {
        let pivot = list[low]
        var i = low - 1
        var j = high + 1

        while true {
            while true {
                j = j - 1
                if list[j] <= pivot {
                    break
                }
            }

            while true {
                i = i + 1
                if list[i] >= pivot {
                    break
                }
            }

            if i < j {
                let tmp = list[i]
                list[i] = list[j]
                list[j] = tmp
            }
            else {
                return j
            }
        }
    }
    counter = counter + 1
    if low < high {
        let p = partition(list, low: low, high: high)
        quickSort(list, low: low, high: p)
        quickSort(list, low: p + 1, high: high)
    }
}